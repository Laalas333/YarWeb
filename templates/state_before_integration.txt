from flask import Flask, render_template, request, jsonify, send_from_directory, session
import pandas as pd
import os
import yara
import secrets
import requests
import time

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

yara_directory = "yara_files"
os.makedirs(yara_directory, exist_ok=True)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/index.html')
def index_repeat():
    return render_template('index.html')

@app.route('/test.html')
def test():
    return render_template('test.html')

@app.route('/generate', methods=['POST'])
def generate_yara():
    malware_type = request.form.get('malwareType')
    csv_files = {
        "AgentTesla": "AgentTeslaDb.csv",
        "SnakeKeylogger": "SnakeKeyloggerDb.csv",
        "RedLineStealer": "RedLineStealerDb.csv",
        "Loki": "LokiDb.csv"
    }

    file_path = csv_files.get(malware_type, "default.csv")
    yara_rule = read_and_process_csv(file_path, malware_type)

    yara_filename = f"{malware_type}.yara"
    with open(os.path.join(yara_directory, yara_filename), 'w') as file:
        file.write(yara_rule)

    session['yara_filename'] = yara_filename  
    return jsonify({'filename': yara_filename})

@app.route('/download/<filename>')
def download_file(filename):
    return send_from_directory(yara_directory, filename, as_attachment=True)

def read_and_process_csv(file_path, malware_type):
    csv_data = pd.read_csv(file_path)

    def deduplicate_and_process_strings(strings):
        unique_strings = set()
        processed_strings = []
        counter = 0

        for string in strings:
            parts = string.split('$s')[1:]  
            for part in parts:
                string_start = part.find(' "')  
                if string_start != -1:
                    actual_string = part[string_start + 1:].strip()
                    if actual_string not in unique_strings:
                        unique_strings.add(actual_string)
                        processed_strings.append(f"$s{counter} = {actual_string}")
                        counter += 1

        return processed_strings

    deduplicated_processed_strings = deduplicate_and_process_strings(csv_data['Malicious_strings'])

    yara_rule = "rule MalwareDetection {\n"
    yara_rule += "    meta:\n"
    yara_rule += f"        description = \"Generic rule for {malware_type} .exe malwares\"\n"
    yara_rule += "        author = \"Group project\"\n"
    yara_rule += "    strings:\n"
    for s in deduplicated_processed_strings:
        yara_rule += f"        {s}\n"
    yara_rule += "    condition:\n"
    yara_rule += "         ( uint16(0) == 0x5a4d and filesize < 3000KB and ( 8 of them )) or ( all of them )\n"
    yara_rule += "}"

    return yara_rule

@app.route('/test_yara', methods=['POST'])
def test_yara():
    if 'exeFile' not in request.files:
        return 'No file uploaded', 400

    file = request.files['exeFile']
    if file.filename == '':
        return 'No file selected', 400

    filepath = os.path.join('temp', file.filename)
    file.save(filepath)

    # YARA rule matching
    if 'yara_filename' not in session:
        os.remove(filepath)
        return 'YARA rule not generated', 400

    yara_rule_path = os.path.join(yara_directory, session['yara_filename'])
    try:
        rules = yara.compile(filepath=yara_rule_path)
        matches = rules.match(filepath)
        yara_result = 'Matched rules: ' + ', '.join([match.rule for match in matches]) if matches else 'No matches found'
    except Exception as e:
        os.remove(filepath)
        return f'Error testing YARA rule: {e}', 500

    # VirusTotal API integration
    vt_url = "https://www.virustotal.com/api/v3/files"
    api_key = "41f3945d95b4b36bfae1e72dac3abd998422e306f191d9e429208b69ec0f44ff"

    with open(filepath, 'rb') as f:
        files = {'file': (file.filename, f)}
        headers = {'x-apikey': api_key}
        response = requests.post(vt_url, files=files, headers=headers)

    if response.status_code == 200:
        data = response.json()
        analysis_id = data['data']['id']
        analysis_url = f"https://www.virustotal.com/api/v3/analyses/{analysis_id}"

        # Wait for a few seconds before requesting the results
        time.sleep(15)

        analysis_response = requests.get(analysis_url, headers=headers)
        if analysis_response.status_code == 200:
            analysis_data = analysis_response.json()
            os.remove(filepath)  # Clean up the uploaded file after getting the results
            return jsonify({'yara_result': yara_result, 'vt_data': analysis_data})
        else:
            os.remove(filepath)  # Clean up the uploaded file in case of error
            return jsonify({'yara_result': yara_result, 'vt_data': 'Error retrieving analysis results'})
    else:
        os.remove(filepath)  # Clean up the uploaded file in case of error
        return jsonify({'yara_result': yara_result, 'vt_data': 'Error submitting file to VirusTotal'})





if __name__ == '__main__':
    app.config['DEBUG'] = True
    app.run(host='localhost', port=5000, debug=True)
